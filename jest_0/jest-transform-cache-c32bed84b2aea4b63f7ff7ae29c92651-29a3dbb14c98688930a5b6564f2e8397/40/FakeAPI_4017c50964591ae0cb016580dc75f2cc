dd58a3678bc5c71b17c34528b1b353ec
/**
 * A module for a fake api.
 */
"use strict";

class FakeAPI {
  /**
   * @constructor
   *
   * @param {object} options - Configure by sending options.
   */
  constructor(options = {}) {
    this.getRoutes = options.getRoutes || ["", "reports", "about"];
    this.postRoutes = options.postRoutes || ["report", "login"];
  }

  getGet(route) {
    let trimRoute = route.split("/").join("");
    let isValid = this.getRoutes.find(validRoute => validRoute === trimRoute);

    switch (isValid) {
      case "":
        return {
          status: 200,
          title: "Home",
          data: "Welcome to fakeapi"
        };

      case "about":
        return {
          status: 200,
          title: "About",
          data: "This is the about page for fake api"
        };

      case "reports":
        return {
          status: 200,
          title: "Completed reports",
          data: "These are the completed reports",
          reports: [{
            kmom: "01",
            data: "Report for kmom01"
          }, {
            kmom: "02",
            data: "Report for kmom02"
          }, {
            kmom: "03",
            data: "Report for kmom03"
          }]
        };

      default:
        return {
          status: 404,
          data: "Route does not exist"
        };
    }
  }

  getPost(route, data) {
    if (!data) return "No data provided";
    let trimRoute = route.split("/").join("");
    let isValid = this.postRoutes.find(validRoute => validRoute === trimRoute);

    switch (isValid) {
      case "report":
        return {
          status: 201,
          reportInfo: data
        };

      case "login":
        return {
          status: 201,
          loginInfo: data
        };

      default:
        return {
          status: 404,
          data: "Route does not exist"
        };
    }
  }

}

module.exports = FakeAPI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZha2VBUEkuanMiXSwibmFtZXMiOlsiRmFrZUFQSSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImdldFJvdXRlcyIsInBvc3RSb3V0ZXMiLCJnZXRHZXQiLCJyb3V0ZSIsInRyaW1Sb3V0ZSIsInNwbGl0Iiwiam9pbiIsImlzVmFsaWQiLCJmaW5kIiwidmFsaWRSb3V0ZSIsInN0YXR1cyIsInRpdGxlIiwiZGF0YSIsInJlcG9ydHMiLCJrbW9tIiwiZ2V0UG9zdCIsInJlcG9ydEluZm8iLCJsb2dpbkluZm8iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0E7O0FBRUEsTUFBTUEsT0FBTixDQUFjO0FBQ1Y7Ozs7O0FBS0FDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBTyxHQUFHLEVBQVgsRUFBZTtBQUN0QixTQUFLQyxTQUFMLEdBQWtCRCxPQUFPLENBQUNDLFNBQVIsSUFBc0IsQ0FBQyxFQUFELEVBQUssU0FBTCxFQUFnQixPQUFoQixDQUF4QztBQUNBLFNBQUtDLFVBQUwsR0FBa0JGLE9BQU8sQ0FBQ0UsVUFBUixJQUFzQixDQUFDLFFBQUQsRUFBVyxPQUFYLENBQXhDO0FBQ0g7O0FBRURDLEVBQUFBLE1BQU0sQ0FBQ0MsS0FBRCxFQUFRO0FBQ1YsUUFBSUMsU0FBUyxHQUFHRCxLQUFLLENBQUNFLEtBQU4sQ0FBWSxHQUFaLEVBQWlCQyxJQUFqQixDQUFzQixFQUF0QixDQUFoQjtBQUNBLFFBQUlDLE9BQU8sR0FBRyxLQUFLUCxTQUFMLENBQWVRLElBQWYsQ0FBb0JDLFVBQVUsSUFBSUEsVUFBVSxLQUFLTCxTQUFqRCxDQUFkOztBQUNBLFlBQVFHLE9BQVI7QUFDSSxXQUFLLEVBQUw7QUFDSSxlQUFPO0FBQ0hHLFVBQUFBLE1BQU0sRUFBRSxHQURMO0FBRUhDLFVBQUFBLEtBQUssRUFBRSxNQUZKO0FBR0hDLFVBQUFBLElBQUksRUFBRTtBQUhILFNBQVA7O0FBS0osV0FBSyxPQUFMO0FBQ0ksZUFBTztBQUNIRixVQUFBQSxNQUFNLEVBQUUsR0FETDtBQUVIQyxVQUFBQSxLQUFLLEVBQUUsT0FGSjtBQUdIQyxVQUFBQSxJQUFJLEVBQUU7QUFISCxTQUFQOztBQUtKLFdBQUssU0FBTDtBQUNJLGVBQU87QUFDSEYsVUFBQUEsTUFBTSxFQUFFLEdBREw7QUFFSEMsVUFBQUEsS0FBSyxFQUFFLG1CQUZKO0FBR0hDLFVBQUFBLElBQUksRUFBRSxpQ0FISDtBQUlIQyxVQUFBQSxPQUFPLEVBQUUsQ0FDTDtBQUNJQyxZQUFBQSxJQUFJLEVBQUUsSUFEVjtBQUVJRixZQUFBQSxJQUFJLEVBQUU7QUFGVixXQURLLEVBS0w7QUFDSUUsWUFBQUEsSUFBSSxFQUFFLElBRFY7QUFFSUYsWUFBQUEsSUFBSSxFQUFFO0FBRlYsV0FMSyxFQVNMO0FBQ0lFLFlBQUFBLElBQUksRUFBRSxJQURWO0FBRUlGLFlBQUFBLElBQUksRUFBRTtBQUZWLFdBVEs7QUFKTixTQUFQOztBQW9CSjtBQUNJLGVBQU87QUFDSEYsVUFBQUEsTUFBTSxFQUFFLEdBREw7QUFFSEUsVUFBQUEsSUFBSSxFQUFFO0FBRkgsU0FBUDtBQW5DUjtBQXdDSDs7QUFFREcsRUFBQUEsT0FBTyxDQUFDWixLQUFELEVBQVFTLElBQVIsRUFBYztBQUNqQixRQUFJLENBQUNBLElBQUwsRUFBVyxPQUFPLGtCQUFQO0FBQ1gsUUFBSVIsU0FBUyxHQUFHRCxLQUFLLENBQUNFLEtBQU4sQ0FBWSxHQUFaLEVBQWlCQyxJQUFqQixDQUFzQixFQUF0QixDQUFoQjtBQUNBLFFBQUlDLE9BQU8sR0FBRyxLQUFLTixVQUFMLENBQWdCTyxJQUFoQixDQUFxQkMsVUFBVSxJQUFJQSxVQUFVLEtBQUtMLFNBQWxELENBQWQ7O0FBQ0EsWUFBUUcsT0FBUjtBQUNJLFdBQUssUUFBTDtBQUNJLGVBQU87QUFDSEcsVUFBQUEsTUFBTSxFQUFFLEdBREw7QUFFSE0sVUFBQUEsVUFBVSxFQUFFSjtBQUZULFNBQVA7O0FBSUosV0FBSyxPQUFMO0FBQ0ksZUFBTztBQUNIRixVQUFBQSxNQUFNLEVBQUUsR0FETDtBQUVITyxVQUFBQSxTQUFTLEVBQUVMO0FBRlIsU0FBUDs7QUFJSjtBQUNJLGVBQU87QUFDSEYsVUFBQUEsTUFBTSxFQUFFLEdBREw7QUFFSEUsVUFBQUEsSUFBSSxFQUFFO0FBRkgsU0FBUDtBQVpSO0FBaUJIOztBQTdFUzs7QUFnRmRNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRCLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG1vZHVsZSBmb3IgYSBmYWtlIGFwaS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNsYXNzIEZha2VBUEkge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBDb25maWd1cmUgYnkgc2VuZGluZyBvcHRpb25zLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLmdldFJvdXRlcyAgPSBvcHRpb25zLmdldFJvdXRlcyAgfHwgW1wiXCIsIFwicmVwb3J0c1wiLCBcImFib3V0XCJdO1xuICAgICAgICB0aGlzLnBvc3RSb3V0ZXMgPSBvcHRpb25zLnBvc3RSb3V0ZXMgfHwgW1wicmVwb3J0XCIsIFwibG9naW5cIl07XG4gICAgfVxuXG4gICAgZ2V0R2V0KHJvdXRlKSB7XG4gICAgICAgIGxldCB0cmltUm91dGUgPSByb3V0ZS5zcGxpdChcIi9cIikuam9pbihcIlwiKTtcbiAgICAgICAgbGV0IGlzVmFsaWQgPSB0aGlzLmdldFJvdXRlcy5maW5kKHZhbGlkUm91dGUgPT4gdmFsaWRSb3V0ZSA9PT0gdHJpbVJvdXRlKTtcbiAgICAgICAgc3dpdGNoIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICBjYXNlIFwiXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkhvbWVcIixcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogXCJXZWxjb21lIHRvIGZha2VhcGlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJhYm91dFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJBYm91dFwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBcIlRoaXMgaXMgdGhlIGFib3V0IHBhZ2UgZm9yIGZha2UgYXBpXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwicmVwb3J0c1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJDb21wbGV0ZWQgcmVwb3J0c1wiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBcIlRoZXNlIGFyZSB0aGUgY29tcGxldGVkIHJlcG9ydHNcIixcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0czogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGttb206IFwiMDFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBcIlJlcG9ydCBmb3Iga21vbTAxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga21vbTogXCIwMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFwiUmVwb3J0IGZvciBrbW9tMDJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrbW9tOiBcIjAzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogXCJSZXBvcnQgZm9yIGttb20wM1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogXCJSb3V0ZSBkb2VzIG5vdCBleGlzdFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UG9zdChyb3V0ZSwgZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHJldHVybiBcIk5vIGRhdGEgcHJvdmlkZWRcIjtcbiAgICAgICAgbGV0IHRyaW1Sb3V0ZSA9IHJvdXRlLnNwbGl0KFwiL1wiKS5qb2luKFwiXCIpO1xuICAgICAgICBsZXQgaXNWYWxpZCA9IHRoaXMucG9zdFJvdXRlcy5maW5kKHZhbGlkUm91dGUgPT4gdmFsaWRSb3V0ZSA9PT0gdHJpbVJvdXRlKTtcbiAgICAgICAgc3dpdGNoIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICBjYXNlIFwicmVwb3J0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydEluZm86IGRhdGFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwibG9naW5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgICAgICAgICAgICAgbG9naW5JbmZvOiBkYXRhXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogXCJSb3V0ZSBkb2VzIG5vdCBleGlzdFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZha2VBUEk7Il19